# YOLOv5 🚀 by Ultralytics, GPL-3.0 license

# Parameters
nc: 80  # number of classes 目标类别数
depth_multiple: 0.33  # model depth multiple    模型深度倍数: 深度=层数, 最终使用,是将它与number（3, 6...）相乘
width_multiple: 0.50  # layer channel multiple  通道倍数: 在创建卷积层Conv的时候, 64表示这一层输出的特征通道数, 但并不表示YOLOv5s在这一层输出了64个通道数,而是64*width_multiple, 也就是其实输出了32个通道数
# 一层输出的通道数越多, 则表示它越宽.
# 层数越多,宽度越宽, 对应的参数量越大,模型越复杂, 一般来说,准确率就越高.
# 对比yolov5l.yaml、yolov5m.yaml、yolov5n.yaml、yolov5s、yolov5x.yaml 他们之间也就这儿的区别.

# 提前预定义好的矩形框, 利用矩形框实现最终检测.
anchors:
  - [10,13, 16,30, 33,23]  # P3/8         第一层特征上,定义了3个anchors, 分别是[10x13], [16x30], [33x23]; 比较小,也是因为第一层特征通常是预测小目标;
  - [30,61, 62,45, 59,119]  # P4/16
  - [116,90, 156,198, 373,326]  # P5/32

# YOLOv5 v6.0 backbone
backbone:
  # [from, number, module, args]
#  from:-1. 表示是从上一层过来的
#  number:1. 该层模块的数量
#  module: 该层的层结构; Conv:卷积层
#  args: 参数
  [[-1, 1, Conv, [64, 6, 2, 2]],  # 0-P1/2  (Pyramid:金字塔)P1:第一层; /2: 640x640->步长2->320x320,缩小了一倍,所以是/2;
   [-1, 1, Conv, [128, 3, 2]],  # 1-P2/4                   P2:第二层; 又缩小一倍,所以是除以4;
   [-1, 3, C3, [128]],
   [-1, 1, Conv, [256, 3, 2]],  # 3-P3/8                  P3:到第三层,又是一个步长为2的卷积, 变成原图的1/8;
   [-1, 6, C3, [256]],
   [-1, 1, Conv, [512, 3, 2]],  # 5-P4/16                 ......
   [-1, 9, C3, [512]],
   [-1, 1, Conv, [1024, 3, 2]],  # 7-P5/32                ......
   [-1, 3, C3, [1024]],
   [-1, 1, SPPF, [1024, 5]],  # 9 第9层
  ]

# YOLOv5 v6.0 head
head:
  [[-1, 1, Conv, [512, 1, 1]],
   [-1, 1, nn.Upsample, [None, 2, 'nearest']],
   [[-1, 6], 1, Concat, [1]],  # cat backbone P4; Concat合并拼接:[-1,6]上一层给了一个输入, 第6层也给了一个输入
   [-1, 3, C3, [512, False]],  # 13

   [-1, 1, Conv, [256, 1, 1]],
   [-1, 1, nn.Upsample, [None, 2, 'nearest']],
   [[-1, 4], 1, Concat, [1]],  # cat backbone P3
   [-1, 3, C3, [256, False]],  # 17 (P3/8-small) 预测小目标

   [-1, 1, Conv, [256, 3, 2]],
   [[-1, 14], 1, Concat, [1]],  # cat head P4
   [-1, 3, C3, [512, False]],  # 20 (P4/16-medium) 预测中目标

   [-1, 1, Conv, [512, 3, 2]],
   [[-1, 10], 1, Concat, [1]],  # cat head P5
   [-1, 3, C3, [1024, False]],  # 23 (P5/32-large) 预测大目标 32

   [[17, 20, 23], 1, Detect, [nc, anchors]],  # Detect(P3, P4, P5)
  ]
